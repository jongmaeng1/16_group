12월 4일  C++ 파일 입출력

텍스트 파일
  -  글자 혹은 문자들로만 구성되는 파일
  -  '\n', '\t'등의 특수 문자 포함
  -  아스키코드, 유니 코드
바이너리 파일
  -  문자로 표현되지 않는 바이너리 데이터 파일
  -  텍스트 파일의 각 바이트 -> 문자로 해석
  -  바이너리 파일의 각 바이트 -> 문자로 해석되지 않는 것도 있음

파일 입출력은 #include <fstream> 해야함!
파일 입력 : >>,  get(), read()
파일 출력 : <<,  put(), write()

텍스트 I/O
  -  문자 단위로 파일에 쓰기, 파일에서 읽기
  -  텍스트 파일에만 적용
바이너리 I/O
  -  바이트 단위로 파일에 쓰기, 파일에서 읽기
  -  텍스트 파일과 바이너리 파일 모두 입출력 가능

[둘의 차이점] : 개형 문자'\n'를 [추후 완료]

ofstream fout;
fout.open("song.txt"); // song.txt 파일 열기
if(!fout) { // fout 스트림의 파일 열기가 실패한 경우
// 파일 열기 실패를 처리하는 코드
}
int age = 21;
char singer[] = "Kim";
char song[] = "Yesterday";
fout << age << '\n'; // 파일에 21과 '\n'을 기록한다.
fout << singer << endl; // 파일에 "Kim"과 '\n'을 덧붙여 기록한다.
fout << song << endl; // 파일에 "Yesterday"와 '\n'을 덧붙여 기록한다.
fout.close();

파일 모드 설정
void open(const char *filename, ios::openmode mode)

처음부터 읽기
ifstream fin;
fin.open("student.txt", ios::in);

파일의 끝에 데이터를 저장
ofstream fout;
fout.open("student.txt", ios::out | ios::app);
fout << "asdasdasd"; 

파이너리 I/O으로 data.bin파일을 기록
fstream fbinout;
fbinout.open("data.bin", ios::out | ios::binary);
char buf[128];
....
fbinout.write(buf, 128);

get()은 파일의 끝에서 EOF(-1)을 리턴하는 방식으로 종료된다.

C++파일 입출력 방식
  -  순차 접근
      -  읽은 다음 위치에서 읽고, 쓴 다음 위치에 쓰는 방식
      -  디폴트 파일 입출력 방식
  -  임의 접근
      -  파일 내의 임의의 위치로 옮겨 다니면서 읽고 쓸 수 있는 방식
      -  파일 포인터를 옮겨 파일 입출력

                              중간 궁금점
어차피 텍스트 파일이나 바이너리 파일이나 1과 0으로 이루어진 파일이라는 점은 똑같은데 굳이 왜 나누었을까
  ㄴ 이게 다음 부분에 나왔음...

텍스트 I/O와 바이너리 I/O의 확실한 차이점
  개행문자 '\n'을 읽고 쓸 때 서로 다르게 작동한다!

        텍스트 I/O 모드

                              파일
\n  --------------------->  ...\r\n
      <<, put(), write()
\n  <--------------------   ...\r\n
      >>. get(), read()


          바이너리 I/O 모드
                              파일
\r\n  --------------------->  ...\r\n
          put(), write()
\r\n  <--------------------   ...\r\n
          get(), read()


파일 포인터
  파일은 연속된 바이트의 집합
  파일에서 다음에 읽거나 쓸 위치를 표시하는 특별한 마크
  C++은 열려진 파일마다 get pointer, put pointer가 존재함

이번 수업에서는 궁금증보다는 느낌점이 대부분이다.
이렇게까지 파일 입출력을 low level적인 관점으로 이해할 수 있게 되어서 너무 기쁘다
특히 마지막에 get pointer를 옮겨서 파일의 크기를 출력하는 부분에서는 와...
내가 무슨 운영체제가 된 기분이었다. 
임베디드나 low level 구조에 관심이 없는 학생이라면 "요즘 같은 시대에 이걸 어디에 써먹어" 싶겠지만
그럼에도 나는 기본적인 동작의 로직을 완전히 이해하는 것을 좋아한다.
우리가 책을 읽고 느끼는 바가 생기고, 세상을 바라보는 시각이 넓어지는 것처럼
당장 활용하기엔 거리가 있는 low lever적인 이해도라도 IT종사자로서 시각이 넓어지는 기분이기 때문이다.
